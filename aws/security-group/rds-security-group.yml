---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates security group for RDS VPC access'

Parameters:
  Application:
    Description: Application Name (all lowercase) (e.g. 'mgm', 'portal', 'portalinterno')
    Type: String
    AllowedPattern: ^[a-z][a-z0-9\-_]*$
    ConstraintDescription: must start with a lowercase letter and can only contain letters, numbers, dash (-) and underscore (_)
    MinLength: 2
    Default: min

  Environment:
    Description: Environment to deploy
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qas
      - hmg
      - prd

Mappings:
  Environments:
    dev:
      VPCId: vpc-08ee3749f2ceed65e
    qas:
      VPCId: vpc-08ee3749f2ceed65e
    hmg:
      VPCId: vpc-08ee3749f2ceed65e # vpc-hmg
    prd:
      VPCId: vpc-08ee3749f2ceed65e

Resources:
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${Application}-${Environment}-securitygroup-rds"
      GroupName: !Sub "${Application}-${Environment}-securitygroup-rds"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 3306
          ToPort: 3306
          IpProtocol: tcp
      Tags:
        - { Key: Name, Value: !Sub "${Application}-${Environment}-securitygroup-rds" }
        - { Key: Layer, Value: securitygroup }
      VpcId: !FindInMap [Environments, !Ref Environment, VPCId]

Outputs:
  RDSSecurityGroupArn:
    Description: The ARN of the RDS SecurityGroup
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-RDSSecurityGroupArn"

  RDSSecurityGroupGroupId:
    Description: The ARN of the RDS SecurityGroup
    Value: !GetAtt RDSSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-RDSSecurityGroupGroupId"